import type { EnvironmentConfig, RsbuildConfig, Rspack } from '@rsbuild/core';
import type { moduleFederationPlugin } from '@module-federation/sdk';
export declare const SSR_DIR = "ssr";
export declare const SSR_ENV_NAME = "mf-ssr";
export declare function setSSREnv(): void;
export declare function patchSSRRspackConfig(config: Rspack.Configuration, mfConfig: moduleFederationPlugin.ModuleFederationPluginOptions, ssrDir: string, callerName?: string, resetEntry?: boolean, modifyPublicPath?: boolean): Rspack.RspackOptions;
export declare function createSSRREnvConfig(envConfig: EnvironmentConfig, mfConfig: moduleFederationPlugin.ModuleFederationPluginOptions, ssrDir: string, rsbuildConfig: RsbuildConfig, callerName?: string): EnvironmentConfig;
export declare function createSSRMFConfig(mfConfig: moduleFederationPlugin.ModuleFederationPluginOptions): {
    exposes: {};
    library: {
        name: string | undefined;
        type: string;
        amdContainer?: moduleFederationPlugin.AmdContainer;
        auxiliaryComment?: moduleFederationPlugin.AuxiliaryComment;
        export?: moduleFederationPlugin.LibraryExport;
        umdNamedDefine?: moduleFederationPlugin.UmdNamedDefine;
    };
    dts: boolean;
    dev: boolean;
    runtimePlugins: string[];
    filename?: string;
    name?: string;
    remoteType?: moduleFederationPlugin.ExternalsType;
    remotes?: moduleFederationPlugin.Remotes;
    runtime?: moduleFederationPlugin.EntryRuntime;
    shareScope?: string | string[];
    shareStrategy?: moduleFederationPlugin.SharedStrategy;
    shared?: moduleFederationPlugin.Shared;
    getPublicPath?: string;
    implementation?: string;
    manifest?: boolean | moduleFederationPlugin.PluginManifestOptions;
    dataPrefetch?: moduleFederationPlugin.DataPrefetch;
    virtualRuntimeEntry?: boolean;
    experiments?: {
        externalRuntime?: boolean;
        provideExternalRuntime?: boolean;
        asyncStartup?: boolean;
        optimization?: {
            disableSnapshot?: boolean;
            target?: "web" | "node";
        };
    };
    bridge?: {
        disableAlias?: boolean;
    };
    async?: boolean | moduleFederationPlugin.AsyncBoundaryOptions;
};
