import { ModuleFederationPlugin, PLUGIN_NAME } from '@module-federation/enhanced/rspack';
import { SSR_DIR } from '../utils';
import type { moduleFederationPlugin } from '@module-federation/sdk';
import type { RsbuildPlugin, Rspack } from '@rsbuild/core';
type ModuleFederationOptions = moduleFederationPlugin.ModuleFederationPluginOptions;
type RSBUILD_PLUGIN_OPTIONS = {
    ssr?: boolean;
    ssrDir?: string;
    environment?: string;
};
type ExposedAPIType = {
    options: {
        nodePlugin?: ModuleFederationPlugin;
        browserPlugin?: ModuleFederationPlugin;
        rspressSSGPlugin?: ModuleFederationPlugin;
        distOutputDir?: string;
    };
    isSSRConfig: typeof isSSRConfig;
    isRspressSSGConfig: typeof isRspressSSGConfig;
};
export type { ModuleFederationOptions, ExposedAPIType };
declare const RSBUILD_PLUGIN_MODULE_FEDERATION_NAME = "rsbuild:module-federation-enhanced";
export { RSBUILD_PLUGIN_MODULE_FEDERATION_NAME, PLUGIN_NAME, SSR_DIR };
export declare function isMFFormat(bundlerConfig: Rspack.Configuration): boolean;
declare const isSSRConfig: (bundlerConfigName?: string) => boolean;
declare const isRspressSSGConfig: (bundlerConfigName?: string) => bundlerConfigName is "node";
export declare const pluginModuleFederation: (moduleFederationOptions: ModuleFederationOptions, rsbuildOptions?: RSBUILD_PLUGIN_OPTIONS) => RsbuildPlugin;
export { createModuleFederationConfig } from '@module-federation/sdk';
