{"version":3,"file":"plugin.cjs.cjs","sources":["../src/plugin.ts"],"sourcesContent":["import { __awaiter } from \"tslib\";\nimport { getResourceUrl } from '@module-federation/sdk';\nimport { getSignalFromManifest } from './common/runtime-utils';\nimport { MFDataPrefetch } from './prefetch';\nimport logger from './logger';\nimport { SHARED_STRATEGY } from './constant';\nconst loadingArray = [];\nlet sharedFlag = SHARED_STRATEGY;\nexport const prefetchPlugin = () => ({\n    name: 'data-prefetch-runtime-plugin',\n    initContainer(options) {\n        const { remoteSnapshot, remoteInfo, id, origin } = options;\n        const snapshot = remoteSnapshot;\n        const { name } = remoteInfo;\n        const prefetchOptions = {\n            name,\n            remote: remoteInfo,\n            origin,\n            remoteSnapshot: snapshot,\n        };\n        const signal = getSignalFromManifest(snapshot);\n        if (!signal) {\n            return options;\n        }\n        if (sharedFlag !== SHARED_STRATEGY) {\n            throw new Error(`[Module Federation Data Prefetch]: If you want to use data prefetch, the shared strategy must be 'loaded-first'`);\n        }\n        const instance = MFDataPrefetch.getInstance(name) || new MFDataPrefetch(prefetchOptions);\n        let prefetchUrl;\n        if (snapshot.prefetchEntry) {\n            prefetchUrl = getResourceUrl(snapshot, snapshot.prefetchEntry);\n        }\n        const exist = loadingArray.find((loading) => loading.id === id);\n        if (exist) {\n            return options;\n        }\n        const promise = instance.loadEntry(prefetchUrl).then(() => __awaiter(this, void 0, void 0, function* () {\n            const projectExports = instance.getProjectExports();\n            if (projectExports instanceof Promise) {\n                yield projectExports;\n            }\n            return Promise.resolve().then(() => {\n                const exports = instance.getExposeExports(id);\n                logger.info(`1. Start Prefetch initContainer: ${id} - ${performance.now()}`);\n                const result = Object.keys(exports).map((k) => {\n                    const value = instance.prefetch({\n                        id,\n                        functionId: k,\n                    });\n                    const functionId = k;\n                    return {\n                        value,\n                        functionId,\n                    };\n                });\n                return result;\n            });\n        }));\n        loadingArray.push({\n            id,\n            promise,\n        });\n        return options;\n    },\n    afterResolve(options) {\n        const { remoteSnapshot, remoteInfo, id, origin } = options;\n        const snapshot = remoteSnapshot;\n        const { name } = remoteInfo;\n        const prefetchOptions = {\n            name,\n            remote: remoteInfo,\n            origin,\n            remoteSnapshot: snapshot,\n        };\n        const signal = getSignalFromManifest(snapshot);\n        if (!signal) {\n            return options;\n        }\n        const inited = loadingArray.some((info) => info.id === id);\n        if (!inited) {\n            return options;\n        }\n        if (sharedFlag !== SHARED_STRATEGY) {\n            throw new Error(`[Module Federation Data Prefetch]: If you want to use data prefetch, the shared strategy must be 'loaded-first'`);\n        }\n        const instance = MFDataPrefetch.getInstance(name) || new MFDataPrefetch(prefetchOptions);\n        let prefetchUrl;\n        if (snapshot.prefetchEntry) {\n            prefetchUrl = getResourceUrl(snapshot, snapshot.prefetchEntry);\n        }\n        const index = loadingArray.findIndex((loading) => loading.id === id);\n        if (index !== -1) {\n            loadingArray.splice(index, 1);\n        }\n        const promise = instance.loadEntry(prefetchUrl).then(() => __awaiter(this, void 0, void 0, function* () {\n            const projectExports = instance.getProjectExports();\n            if (projectExports instanceof Promise) {\n                yield projectExports;\n            }\n            return Promise.resolve().then(() => {\n                const exports = instance.getExposeExports(id);\n                logger.info(`1. Start Prefetch afterResolve: ${id} - ${performance.now()}`);\n                const result = Object.keys(exports).map((k) => {\n                    const value = instance.prefetch({\n                        id,\n                        functionId: k,\n                    });\n                    const functionId = k;\n                    return {\n                        value,\n                        functionId,\n                    };\n                });\n                return result;\n            });\n        }));\n        loadingArray.push({\n            id,\n            promise,\n        });\n        return options;\n    },\n    onLoad(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            const { remote, id } = options;\n            const { name } = remote;\n            const promise = (_a = loadingArray.find((loading) => loading.id === id)) === null || _a === void 0 ? void 0 : _a.promise;\n            if (promise) {\n                const prefetch = yield promise;\n                const prefetchValue = prefetch.map((result) => result.value);\n                yield Promise.all(prefetchValue);\n                const instance = MFDataPrefetch.getInstance(name);\n                prefetch.forEach((result) => {\n                    const { value, functionId } = result;\n                    instance.memorize(id + functionId, value);\n                });\n            }\n            return options;\n        });\n    },\n    beforeLoadShare(options) {\n        const shareInfo = options.shareInfo;\n        sharedFlag = (shareInfo === null || shareInfo === void 0 ? void 0 : shareInfo.strategy) || sharedFlag;\n        return options;\n    },\n});\nexport default prefetchPlugin;\n"],"names":["loadingArray","sharedFlag","SHARED_STRATEGY","prefetchPlugin","name","initContainer","options","remoteSnapshot","remoteInfo","id","origin","snapshot","prefetchOptions","remote","signal","getSignalFromManifest","Error","instance","MFDataPrefetch","getInstance","prefetchUrl","prefetchEntry","getResourceUrl","exist","find","loading","promise","loadEntry","then","__awaiter","projectExports","getProjectExports","Promise","resolve","exports","getExposeExports","logger","info","performance","now","result","Object","keys","map","k","value","prefetch","functionId","push","afterResolve","inited","some","index","findIndex","splice","onLoad","_a","prefetchValue","all","forEach","memorize","beforeLoadShare","shareInfo","strategy"],"mappings":"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"}